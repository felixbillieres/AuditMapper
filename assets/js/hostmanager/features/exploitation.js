/**
 * Gestionnaire des √©tapes d'exploitation
 */

export class ExploitationManager {
    constructor(hostManager) {
        this.hostManager = hostManager;
        this.currentEditingHost = null; // R√©f√©rence vers le host en cours d'√©dition
        this.currentScreenshots = []; // Pour stocker les screenshots temporaires
    }

    initialize() {
        console.log(">>> ExploitationManager.initialize: START");
        this.setupEventListeners();
        console.log(">>> ExploitationManager.initialize: END");
    }

    setupEventListeners() {
        // Utiliser la d√©l√©gation d'√©v√©nements pour les boutons qui peuvent ne pas exister au moment de l'initialisation
        document.addEventListener('click', (e) => {
            if (e.target && e.target.id === 'addExploitationStepBtn') {
                e.preventDefault();
                console.log('Add exploitation step button clicked');
                this.addExploitationStep();
            }
            
            if (e.target && e.target.id === 'saveExploitationStepBtn') {
                e.preventDefault();
                console.log('Save exploitation step button clicked');
                this.saveExploitationStepFromModal();
            }
        });

        // √âcouteur pour la mise √† jour de l'aper√ßu de capture d'√©cran
        const stepDetailModalScreenshotUrl = document.getElementById('stepDetailModalScreenshotUrl');
        if (stepDetailModalScreenshotUrl) {
            stepDetailModalScreenshotUrl.addEventListener('input', () => {
                this.updateScreenshotPreview(stepDetailModalScreenshotUrl.value);
            });
        }

        // √âcouteur pour le collage d'images (Ctrl+V)
        document.addEventListener('paste', (e) => {
            // V√©rifier si on est dans la modale d'exploitation
            if (document.getElementById('exploitationStepDetailModal') && 
                document.getElementById('exploitationStepDetailModal').classList.contains('show')) {
                const items = Array.from(e.clipboardData.items);
                const imageItems = items.filter(item => item.type.startsWith('image/'));
                
                if (imageItems.length > 0) {
                    imageItems.forEach(item => {
                        const file = item.getAsFile();
                        this.handleImageFile(file);
                    });
                    e.preventDefault();
                }
            }
        });
    }

    // M√©thode pour d√©finir le host en cours d'√©dition
    setCurrentEditingHost(host) {
        this.currentEditingHost = host;
    }

    populateExploitationStepsSection(exploitationSteps) {
        console.log(">>> populateExploitationStepsSection called with:", exploitationSteps);
        
        const container = document.getElementById('exploitationStepsList');
        if (!container) {
            console.warn("Exploitation steps container not found");
            return;
        }

        container.innerHTML = '';

        if (!exploitationSteps || exploitationSteps.length === 0) {
            container.innerHTML = '<p class="text-muted small no-exploitation-steps-msg">Aucune √©tape d\'exploitation enregistr√©e pour cet h√¥te.</p>';
            return;
        }

        // Trier par ordre
        const sortedSteps = [...exploitationSteps].sort((a, b) => (a.order || 0) - (b.order || 0));

        sortedSteps.forEach((step, index) => {
            const stepElement = this.createExploitationStepElement(step, index);
            container.appendChild(stepElement);
        });
    }

    // Alias pour compatibilit√©
    populateExploitationSteps(exploitationSteps) {
        this.populateExploitationStepsSection(exploitationSteps);
    }

    createExploitationStepElement(step, index) {
        const div = document.createElement('div');
        div.className = 'exploitation-step-item mb-2 p-2 border rounded';
        
        // Gestion des screenshots (nouveau format avec array ou ancien format avec une seule image)
        let screenshotsHtml = '';
        const screenshots = step.screenshots || (step.screenshot ? [step.screenshot] : []);
        
        if (screenshots.length > 0) {
            screenshotsHtml = `
                <div class="mb-2">
                    <small class="text-muted">üì∏ Screenshots (${screenshots.length}):</small><br>
                    <div class="screenshots-grid">
            `;
            
            screenshots.forEach((screenshot, screenshotIndex) => {
                screenshotsHtml += `
                    <div class="screenshot-thumbnail-container position-relative" style="display: inline-block; margin: 5px;">
                        <img src="${screenshot}" alt="Screenshot ${screenshotIndex + 1}" 
                             style="max-width: 120px; max-height: 80px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; object-fit: cover;" 
                             class="screenshot-thumbnail" data-screenshot="${screenshot.replace(/'/g, "\\'")}"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='inline-block';">
                        <span class="text-danger small" style="display: none;">‚ùå Erreur</span>
                    </div>
                `;
            });
            
            screenshotsHtml += `
                    </div>
                </div>
            `;
        }

        const severityIcon = {
            'Low': 'üü¢',
            'Medium': 'üü°', 
            'High': 'üü†',
            'Critical': 'üî¥'
        }[step.severity] || '‚ö™';

        div.innerHTML = `
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div class="d-flex align-items-center">
                    <span class="badge badge-primary step-order-badge mr-2">${step.order || index + 1}</span>
                    <h6 class="mb-0">${step.title}</h6>
                    <span class="badge badge-${this.getSeverityColor(step.severity)} ml-2">${severityIcon} ${step.severity || 'Unknown'}</span>
                </div>
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-secondary edit-step-btn" data-step-index="${index}" title="√âditer">
                        ‚úèÔ∏è
                    </button>
                    <button type="button" class="btn btn-outline-danger remove-step-btn" data-step-index="${index}" title="Supprimer">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
            
            ${step.description ? `<p class="mb-2 text-muted small">${step.description}</p>` : ''}
            
            ${step.tool ? `<div class="mb-2"><small class="text-muted">üîß Outil:</small> <code class="small">${step.tool}</code></div>` : ''}
            ${step.cve ? `<div class="mb-2"><small class="text-muted">üö® CVE:</small> <span class="badge badge-warning">${step.cve}</span></div>` : ''}
            
            ${step.command ? `
                <div class="mb-2">
                    <small class="text-muted">üíª Commande:</small>
                    <code class="d-block small bg-light p-2 rounded">${step.command}</code>
                </div>
            ` : ''}
            
            ${screenshotsHtml}
            
            ${step.output ? `
                <div class="mb-2">
                    <small class="text-muted">üìÑ R√©sultat:</small>
                    <pre class="small bg-light p-2 rounded" style="max-height: 100px; overflow-y: auto;">${step.output}</pre>
                </div>
            ` : ''}
            
            ${step.notes ? `<div class="text-muted small">üìù ${step.notes}</div>` : ''}
        `;

        // Ajouter les event listeners apr√®s avoir cr√©√© l'√©l√©ment
        const editBtn = div.querySelector('.edit-step-btn');
        const removeBtn = div.querySelector('.remove-step-btn');
        
        if (editBtn) {
            editBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Edit button clicked for step:', index);
                this.editExploitationStep(index);
            });
        }
        
        if (removeBtn) {
            removeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Remove button clicked for step:', index);
                this.removeExploitationStep(index);
            });
        }

        // Ajouter les event listeners pour les screenshots
        const screenshotThumbnails = div.querySelectorAll('.screenshot-thumbnail');
        screenshotThumbnails.forEach(thumbnail => {
            thumbnail.addEventListener('click', () => {
                const screenshotSrc = thumbnail.getAttribute('data-screenshot');
                this.viewFullScreenshot(screenshotSrc);
            });
        });

        return div;
    }

    addExploitationStep() {
        this.openExploitationStepModal(null); // null = mode ajout
    }

    editExploitationStep(index) {
        console.log(`Editing exploitation step ${index}`);
        console.log('Current editing host:', this.currentEditingHost);
        console.log('HostManager instance:', this.hostManager);
        this.openExploitationStepModal(index);
    }

    openExploitationStepModal(stepIndex) {
        console.log('openExploitationStepModal called with stepIndex:', stepIndex);
        const modal = document.getElementById('exploitationStepDetailModal');
        const form = document.getElementById('exploitationStepDetailForm');
        
        console.log('Modal element:', modal);
        console.log('Form element:', form);
        
        if (!modal || !form) {
            console.error('Modal or form not found!');
            return;
        }

        // R√©initialiser le formulaire
        form.reset();
        this.currentScreenshots = [];

        if (stepIndex !== null) {
            // Mode √©dition
            const steps = this.currentEditingHost?.data?.exploitationSteps || [];
            const step = steps[stepIndex];
            if (!step) {
                alert('√âtape introuvable.');
                return;
            }

            document.getElementById('exploitationStepDetailModalLabel').textContent = "Modifier l'√âtape";
            document.getElementById('stepDetailModalStepId').value = stepIndex;
            document.getElementById('stepDetailModalOrder').value = step.order || 1;
            document.getElementById('stepDetailModalTitle').value = step.title || '';
            document.getElementById('stepDetailModalDescription').value = step.description || '';
            document.getElementById('stepDetailModalCommand').value = step.command || '';
            document.getElementById('stepDetailModalOutput').value = step.output || '';
            document.getElementById('stepDetailModalNotes').value = step.notes || '';
            document.getElementById('stepDetailModalCVE').value = step.cve || '';
            document.getElementById('stepDetailModalTool').value = step.tool || '';
            document.getElementById('stepDetailModalSeverity').value = step.severity || 'Medium';
            document.getElementById('stepDetailModalScreenshotUrl').value = step.screenshotUrl || '';
            
            // Charger les screenshots existants
            if (step.screenshots && Array.isArray(step.screenshots)) {
                this.currentScreenshots = [...step.screenshots];
            } else if (step.screenshot) {
                this.currentScreenshots = [step.screenshot];
            }
            
            this.updateScreenshotPreview(step.screenshotUrl || '');
            this.refreshScreenshotsPreview();
        } else {
            // Mode ajout
            document.getElementById('exploitationStepDetailModalLabel').textContent = "Ajouter une Nouvelle √âtape";
            document.getElementById('stepDetailModalStepId').value = '';
            
            // Calculer le prochain num√©ro d'ordre
            const steps = this.currentEditingHost?.data?.exploitationSteps || [];
            const maxOrder = steps.reduce((max, s) => Math.max(max, s.order || 0), 0);
            document.getElementById('stepDetailModalOrder').value = maxOrder + 1;
        }

        // Configurer la gestion des screenshots
        this.setupScreenshotHandling();

        // Afficher la modale (Bootstrap)
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('show');
        }
    }

    saveExploitationStepFromModal() {
        const stepIndex = document.getElementById('stepDetailModalStepId').value;
        const order = parseInt(document.getElementById('stepDetailModalOrder').value, 10);
        const title = document.getElementById('stepDetailModalTitle').value.trim();
        const description = document.getElementById('stepDetailModalDescription').value.trim();
        const command = document.getElementById('stepDetailModalCommand').value.trim();
        const output = document.getElementById('stepDetailModalOutput').value.trim();
        const notes = document.getElementById('stepDetailModalNotes').value.trim();
        const cve = document.getElementById('stepDetailModalCVE').value.trim();
        const tool = document.getElementById('stepDetailModalTool').value.trim();
        const severity = document.getElementById('stepDetailModalSeverity').value;
        const screenshotUrl = document.getElementById('stepDetailModalScreenshotUrl').value.trim();

        if (isNaN(order) || order < 1) {
            alert('Veuillez entrer un num√©ro d\'ordre valide (entier positif).');
            return;
        }

        if (!title) {
            alert('Veuillez entrer un titre pour l\'√©tape.');
            return;
        }

        // V√©rifier que nous avons un host en cours d'√©dition
        if (!this.currentEditingHost) {
            alert('Aucun h√¥te en cours d\'√©dition.');
            return;
        }

        // Initialiser le tableau des √©tapes si n√©cessaire
        if (!this.currentEditingHost.data.exploitationSteps) {
            this.currentEditingHost.data.exploitationSteps = [];
        }

        const stepData = {
            order: order,
            title: title,
            description: description,
            command: command,
            output: output,
            notes: notes,
            cve: cve,
            tool: tool,
            severity: severity,
            screenshots: [...this.currentScreenshots], // Copier le tableau des screenshots
            screenshotUrl: screenshotUrl,
            timestamp: new Date().toISOString()
        };

        if (stepIndex !== '') {
            // Mode √©dition
            const index = parseInt(stepIndex, 10);
            if (index >= 0 && index < this.currentEditingHost.data.exploitationSteps.length) {
                this.currentEditingHost.data.exploitationSteps[index] = stepData;
            }
        } else {
            // Mode ajout
            this.currentEditingHost.data.exploitationSteps.push(stepData);
        }

        // Sauvegarder les donn√©es du host
        this.hostManager.modules.storage.saveData();

        // Mettre √† jour l'affichage
        this.populateExploitationSteps(this.currentEditingHost.data.exploitationSteps);

        // R√©initialiser les screenshots
        this.currentScreenshots = [];

        // Fermer la modale
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('hide');
        }
    }

    removeExploitationStep(index) {
        console.log(`Removing exploitation step ${index}`);
        
        if (!this.currentEditingHost || !this.currentEditingHost.data.exploitationSteps) {
            alert('Aucun h√¥te en cours d\'√©dition.');
            return;
        }

        if (index < 0 || index >= this.currentEditingHost.data.exploitationSteps.length) {
            alert('Index d\'√©tape invalide.');
            return;
        }

        if (confirm('Supprimer cette √©tape d\'exploitation ?')) {
            this.currentEditingHost.data.exploitationSteps.splice(index, 1);
            
            // R√©organiser les ordres
            this.currentEditingHost.data.exploitationSteps.forEach((step, idx) => {
                step.order = idx + 1;
            });
            
            // Sauvegarder les donn√©es
            this.hostManager.modules.storage.saveData();
            
            // Mettre √† jour l'affichage
            this.populateExploitationSteps(this.currentEditingHost.data.exploitationSteps);
        }
    }

    // Gestion des screenshots
    setupScreenshotHandling() {
        const uploadArea = document.getElementById('stepDetailModalScreenshotUploadArea');
        const fileInput = document.getElementById('stepDetailModalScreenshotFile');
        
        if (!uploadArea || !fileInput) return;

        // Gestion du drag & drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('drag-over');
        });

        uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('drag-over');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('drag-over');
            
            const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
            files.forEach(file => this.handleImageFile(file));
        });

        // Gestion de la s√©lection de fichiers multiples
        fileInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            files.forEach(file => this.handleImageFile(file));
            e.target.value = ''; // Reset pour permettre de s√©lectionner les m√™mes fichiers
        });
    }

    handleImageFile(file) {
        if (!file.type.startsWith('image/')) {
            alert('Veuillez s√©lectionner un fichier image.');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            this.addScreenshotToPreview(e.target.result);
        };
        reader.readAsDataURL(file);
    }

    addScreenshotToPreview(imageSrc) {
        if (!this.currentScreenshots) {
            this.currentScreenshots = [];
        }
        
        this.currentScreenshots.push(imageSrc);
        this.refreshScreenshotsPreview();
    }

    removeScreenshotAtIndex(index) {
        if (!this.currentScreenshots || index < 0 || index >= this.currentScreenshots.length) return;

        this.currentScreenshots.splice(index, 1);
        this.refreshScreenshotsPreview();
    }

    refreshScreenshotsPreview() {
        const previewContainer = document.getElementById('stepDetailModalScreenshotsPreview');
        if (!previewContainer) return;

        previewContainer.innerHTML = '';
        
        if (this.currentScreenshots) {
            this.currentScreenshots.forEach((screenshot, index) => {
                const screenshotDiv = document.createElement('div');
                screenshotDiv.className = 'screenshot-item mb-3';
                screenshotDiv.innerHTML = `
                    <div class="screenshot-preview-container">
                        <img src="${screenshot}" alt="Screenshot ${index + 1}" 
                             style="max-width: 100%; max-height: 200px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;" 
                             class="screenshot-preview-img" data-screenshot="${screenshot.replace(/'/g, "\\'")}">
                        <div class="screenshot-controls mt-2">
                            <button type="button" class="btn btn-outline-danger btn-sm remove-screenshot-btn" data-screenshot-index="${index}" title="Supprimer ce screenshot">
                                üóëÔ∏è Supprimer
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm ml-2 view-screenshot-btn" data-screenshot="${screenshot.replace(/'/g, "\\'")}" title="Voir en grand">
                                üîç Agrandir
                            </button>
                        </div>
                    </div>
                `;

                // Ajouter les event listeners pour les boutons de screenshot
                const removeScreenshotBtn = screenshotDiv.querySelector('.remove-screenshot-btn');
                const viewScreenshotBtn = screenshotDiv.querySelector('.view-screenshot-btn');
                const screenshotPreviewImg = screenshotDiv.querySelector('.screenshot-preview-img');

                if (removeScreenshotBtn) {
                    removeScreenshotBtn.addEventListener('click', () => {
                        const screenshotIndex = parseInt(removeScreenshotBtn.getAttribute('data-screenshot-index'));
                        this.removeScreenshotAtIndex(screenshotIndex);
                    });
                }

                if (viewScreenshotBtn) {
                    viewScreenshotBtn.addEventListener('click', () => {
                        const screenshotSrc = viewScreenshotBtn.getAttribute('data-screenshot');
                        this.viewFullScreenshot(screenshotSrc);
                    });
                }

                if (screenshotPreviewImg) {
                    screenshotPreviewImg.addEventListener('click', () => {
                        const screenshotSrc = screenshotPreviewImg.getAttribute('data-screenshot');
                        this.viewFullScreenshot(screenshotSrc);
                    });
                }
                previewContainer.appendChild(screenshotDiv);
            });
        }
    }

    viewFullScreenshot(imageSrc) {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'screenshotViewModal';
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Screenshot</h5>
                        <button type="button" class="close close-screenshot-modal-btn">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body text-center">
                        <img src="${imageSrc}" alt="Screenshot" style="max-width: 100%; height: auto;">
                    </div>
                </div>
            </div>
        `;

        // Ajouter l'event listener pour fermer la modal
        const closeBtn = modal.querySelector('.close-screenshot-modal-btn');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.closeScreenshotModal();
            });
        }

        document.body.appendChild(modal);
        
        if (window.$ && $.fn.modal) {
            $(modal).modal('show');
        } else {
            modal.style.display = 'block';
            modal.classList.add('show');
        }
    }

    closeScreenshotModal() {
        const modal = document.getElementById('screenshotViewModal');
        if (modal) {
            modal.remove();
        }
    }

    updateScreenshotPreview(url) {
        const preview = document.getElementById('stepDetailModalScreenshotPreview');
        if (!preview) return;

        preview.innerHTML = '';
        
        if (url && (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/'))) {
            const img = document.createElement('img');
            img.src = url;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '180px';
            img.alt = 'Aper√ßu capture d\'√©cran';
            img.onerror = () => {
                preview.innerHTML = '<p class="text-danger small">Impossible de charger l\'aper√ßu de l\'image.</p>';
            };
            preview.appendChild(img);
        } else if (url) {
            preview.innerHTML = '<p class="text-muted small">Aper√ßu non disponible pour ce chemin.</p>';
        }
    }

    getSeverityColor(severity) {
        const colors = {
            'Low': 'success',
            'Medium': 'warning', 
            'High': 'danger',
            'Critical': 'dark'
        };
        return colors[severity] || 'secondary';
    }

    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    getExploitationStepsData() {
        return this.currentEditingHost?.data?.exploitationSteps || [];
    }
} 