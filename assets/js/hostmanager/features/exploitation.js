/**
 * Gestionnaire des étapes d'exploitation
 */

export class ExploitationManager {
    constructor(hostManager) {
        this.hostManager = hostManager;
        this.exploitationStepsData = [];
    }

    initialize() {
        console.log(">>> ExploitationManager.initialize: START");
        this.setupEventListeners();
        console.log(">>> ExploitationManager.initialize: END");
    }

    setupEventListeners() {
        const addExploitationStepBtn = document.getElementById('addExploitationStepBtn');
        if (addExploitationStepBtn) {
            addExploitationStepBtn.addEventListener('click', () => this.addExploitationStep());
        }

        const saveExploitationStepBtn = document.getElementById('saveExploitationStepBtn');
        if (saveExploitationStepBtn) {
            saveExploitationStepBtn.addEventListener('click', () => this.saveExploitationStepFromModal());
        }

        // Écouteur pour la mise à jour de l'aperçu de capture d'écran
        const stepDetailModalScreenshotUrl = document.getElementById('stepDetailModalScreenshotUrl');
        if (stepDetailModalScreenshotUrl) {
            stepDetailModalScreenshotUrl.addEventListener('input', () => {
                this.updateScreenshotPreview(stepDetailModalScreenshotUrl.value);
            });
        }
    }

    populateExploitationStepsSection(exploitationSteps) {
        console.log(">>> populateExploitationStepsSection called with:", exploitationSteps);
        
        const container = document.getElementById('exploitationStepsList');
        if (!container) {
            console.warn("Exploitation steps container not found");
            return;
        }

        container.innerHTML = '';

        if (!exploitationSteps || exploitationSteps.length === 0) {
            container.innerHTML = '<p class="text-muted">Aucune étape d\'exploitation enregistrée.</p>';
            return;
        }

        exploitationSteps.forEach((step, index) => {
            const stepElement = this.createExploitationStepElement(step, index);
            container.appendChild(stepElement);
        });
    }

    // Alias pour compatibilité
    populateExploitationSteps(exploitationSteps) {
        this.populateExploitationStepsSection(exploitationSteps);
    }

    createExploitationStepElement(step, index) {
        const div = document.createElement('div');
        div.className = 'exploitation-step-item mb-2 p-2 border rounded';
        
        div.innerHTML = `
            <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <h6 class="mb-1">${step.title || `Étape ${index + 1}`}</h6>
                    <p class="mb-1 text-muted small">${step.description || 'Aucune description'}</p>
                    ${step.command ? `<code class="small">${step.command}</code>` : ''}
                </div>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-secondary" onclick="hostManager.modules.exploitation.editExploitationStep(${index})" title="Éditer">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-outline-danger" onclick="hostManager.modules.exploitation.removeExploitationStep(${index})" title="Supprimer">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `;

        return div;
    }

    addExploitationStep() {
        this.openExploitationStepModal(null); // null = mode ajout
    }

    editExploitationStep(index) {
        console.log(`Editing exploitation step ${index}`);
        // Cette méthode sera implémentée selon vos besoins
    }

    openExploitationStepModal(stepId) {
        const modal = document.getElementById('exploitationStepDetailModal');
        const form = document.getElementById('exploitationStepDetailForm');
        
        if (!modal || !form) return;

        // Réinitialiser le formulaire
        form.reset();

        if (stepId) {
            // Mode édition
            const step = this.exploitationStepsData.find(s => s.id === stepId);
            if (!step) {
                alert('Étape introuvable.');
                return;
            }

            document.getElementById('exploitationStepDetailModalLabel').textContent = "Modifier l'Étape";
            document.getElementById('stepDetailModalStepId').value = step.id;
            document.getElementById('stepDetailModalOrder').value = step.order || 1;
            document.getElementById('stepDetailModalTitle').value = step.title || '';
            document.getElementById('stepDetailModalContent').value = step.content || '';
            document.getElementById('stepDetailModalScreenshotUrl').value = step.screenshotUrl || '';
            this.updateScreenshotPreview(step.screenshotUrl || '');
        } else {
            // Mode ajout
            document.getElementById('exploitationStepDetailModalLabel').textContent = "Ajouter une Nouvelle Étape";
            document.getElementById('stepDetailModalStepId').value = '';
            
            // Calculer le prochain numéro d'ordre
            const maxOrder = this.exploitationStepsData.reduce((max, s) => Math.max(max, s.order || 0), 0);
            document.getElementById('stepDetailModalOrder').value = maxOrder + 1;
        }

        // Afficher la modale (Bootstrap)
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('show');
        }
    }

    saveExploitationStepFromModal() {
        const stepId = document.getElementById('stepDetailModalStepId').value;
        const order = parseInt(document.getElementById('stepDetailModalOrder').value, 10);
        const title = document.getElementById('stepDetailModalTitle').value.trim();
        const content = document.getElementById('stepDetailModalContent').value.trim();
        const screenshotUrl = document.getElementById('stepDetailModalScreenshotUrl').value.trim();

        if (isNaN(order) || order < 1) {
            alert('Veuillez entrer un numéro d\'ordre valide (entier positif).');
            return;
        }

        if (!title) {
            alert('Veuillez entrer un titre pour l\'étape.');
            return;
        }

        const stepData = {
            id: stepId || this.generateUUID(),
            order: order,
            title: title,
            content: content,
            screenshotUrl: screenshotUrl,
            timestamp: new Date().toISOString()
        };

        if (stepId) {
            // Mise à jour
            const stepIndex = this.exploitationStepsData.findIndex(s => s.id === stepId);
            if (stepIndex > -1) {
                this.exploitationStepsData[stepIndex] = stepData;
            }
        } else {
            // Ajout
            this.exploitationStepsData.push(stepData);
        }

        this.populateExploitationSteps(this.exploitationStepsData);

        // Fermer la modale
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('hide');
        }
    }

    removeExploitationStep(index) {
        console.log(`Removing exploitation step ${index}`);
        // Cette méthode sera implémentée selon vos besoins
    }

    updateScreenshotPreview(url) {
        const preview = document.getElementById('stepDetailModalScreenshotPreview');
        if (!preview) return;

        preview.innerHTML = '';
        
        if (url && (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/'))) {
            const img = document.createElement('img');
            img.src = url;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '180px';
            img.alt = 'Aperçu capture d\'écran';
            img.onerror = () => {
                preview.innerHTML = '<p class="text-danger small">Impossible de charger l\'aperçu de l\'image.</p>';
            };
            preview.appendChild(img);
        } else if (url) {
            preview.innerHTML = '<p class="text-muted small">Aperçu non disponible pour ce chemin.</p>';
        }
    }

    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    getExploitationStepsData() {
        return this.exploitationStepsData || [];
    }
} 