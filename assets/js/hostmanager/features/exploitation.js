/**
 * Gestionnaire des Ã©tapes d'exploitation
 */

export class ExploitationManager {
    constructor(hostManager) {
        this.hostManager = hostManager;
        this.exploitationStepsData = [];
    }

    initialize() {
        console.log(">>> ExploitationManager.initialize: START");
        this.setupEventListeners();
        console.log(">>> ExploitationManager.initialize: END");
    }

    setupEventListeners() {
        const addExploitationStepBtn = document.getElementById('addExploitationStepBtn');
        if (addExploitationStepBtn) {
            addExploitationStepBtn.addEventListener('click', () => this.addExploitationStep());
        }

        const saveExploitationStepBtn = document.getElementById('saveExploitationStepBtn');
        if (saveExploitationStepBtn) {
            saveExploitationStepBtn.addEventListener('click', () => this.saveExploitationStepFromModal());
        }

        // Ã‰couteur pour la mise Ã  jour de l'aperÃ§u de capture d'Ã©cran
        const stepDetailModalScreenshotUrl = document.getElementById('stepDetailModalScreenshotUrl');
        if (stepDetailModalScreenshotUrl) {
            stepDetailModalScreenshotUrl.addEventListener('input', () => {
                this.updateScreenshotPreview(stepDetailModalScreenshotUrl.value);
            });
        }
    }

    populateExploitationSteps(steps) {
        console.log(">>> populateExploitationSteps: START");
        this.exploitationStepsData = steps || [];
        
        const container = document.getElementById('exploitationStepsList');
        const noStepsMsg = container?.querySelector('.no-exploitation-steps-msg');
        
        if (!container) return;

        // Vider le container mais garder le message "no steps"
        const children = Array.from(container.children);
        children.forEach(child => {
            if (!child.classList.contains('no-exploitation-steps-msg')) {
                child.remove();
            }
        });

        if (this.exploitationStepsData.length === 0) {
            if (noStepsMsg) noStepsMsg.style.display = 'block';
            return;
        }

        if (noStepsMsg) noStepsMsg.style.display = 'none';

        // Trier les Ã©tapes par ordre
        const sortedSteps = [...this.exploitationStepsData].sort((a, b) => (a.order || 0) - (b.order || 0));

        sortedSteps.forEach((step, index) => {
            const stepDiv = this.createExploitationStepElement(step, index);
            container.appendChild(stepDiv);
        });

        console.log(">>> populateExploitationSteps: END");
    }

    createExploitationStepElement(step, index) {
        const div = document.createElement('div');
        div.className = 'list-group-item d-flex justify-content-between align-items-start';
        
        div.innerHTML = `
            <div class="flex-grow-1">
                <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">Ã‰tape ${step.order || index + 1}: ${step.title || 'Sans titre'}</h6>
                    <small class="text-muted">${step.timestamp ? new Date(step.timestamp).toLocaleDateString() : ''}</small>
                </div>
                <p class="mb-1 small">${(step.content || '').substring(0, 100)}${step.content && step.content.length > 100 ? '...' : ''}</p>
                ${step.screenshotUrl ? '<small class="text-info">ðŸ“· Capture d\'Ã©cran disponible</small>' : ''}
            </div>
            <div class="btn-group-vertical btn-group-sm ml-2">
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="hostManager.modules.exploitation.editExploitationStep('${step.id}')">Ã‰diter</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="hostManager.modules.exploitation.moveStep('${step.id}', 'up')" ${index === 0 ? 'disabled' : ''}>â†‘</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="hostManager.modules.exploitation.moveStep('${step.id}', 'down')" ${index === this.exploitationStepsData.length - 1 ? 'disabled' : ''}>â†“</button>
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="hostManager.modules.exploitation.deleteExploitationStep('${step.id}')">Ã—</button>
            </div>
        `;

        return div;
    }

    addExploitationStep() {
        this.openExploitationStepModal(null); // null = mode ajout
    }

    editExploitationStep(stepId) {
        this.openExploitationStepModal(stepId); // mode Ã©dition
    }

    openExploitationStepModal(stepId) {
        const modal = document.getElementById('exploitationStepDetailModal');
        const form = document.getElementById('exploitationStepDetailForm');
        
        if (!modal || !form) return;

        // RÃ©initialiser le formulaire
        form.reset();

        if (stepId) {
            // Mode Ã©dition
            const step = this.exploitationStepsData.find(s => s.id === stepId);
            if (!step) {
                alert('Ã‰tape introuvable.');
                return;
            }

            document.getElementById('exploitationStepDetailModalLabel').textContent = "Modifier l'Ã‰tape";
            document.getElementById('stepDetailModalStepId').value = step.id;
            document.getElementById('stepDetailModalOrder').value = step.order || 1;
            document.getElementById('stepDetailModalTitle').value = step.title || '';
            document.getElementById('stepDetailModalContent').value = step.content || '';
            document.getElementById('stepDetailModalScreenshotUrl').value = step.screenshotUrl || '';
            this.updateScreenshotPreview(step.screenshotUrl || '');
        } else {
            // Mode ajout
            document.getElementById('exploitationStepDetailModalLabel').textContent = "Ajouter une Nouvelle Ã‰tape";
            document.getElementById('stepDetailModalStepId').value = '';
            
            // Calculer le prochain numÃ©ro d'ordre
            const maxOrder = this.exploitationStepsData.reduce((max, s) => Math.max(max, s.order || 0), 0);
            document.getElementById('stepDetailModalOrder').value = maxOrder + 1;
        }

        // Afficher la modale (Bootstrap)
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('show');
        }
    }

    saveExploitationStepFromModal() {
        const stepId = document.getElementById('stepDetailModalStepId').value;
        const order = parseInt(document.getElementById('stepDetailModalOrder').value, 10);
        const title = document.getElementById('stepDetailModalTitle').value.trim();
        const content = document.getElementById('stepDetailModalContent').value.trim();
        const screenshotUrl = document.getElementById('stepDetailModalScreenshotUrl').value.trim();

        if (isNaN(order) || order < 1) {
            alert('Veuillez entrer un numÃ©ro d\'ordre valide (entier positif).');
            return;
        }

        if (!title) {
            alert('Veuillez entrer un titre pour l\'Ã©tape.');
            return;
        }

        const stepData = {
            id: stepId || this.generateUUID(),
            order: order,
            title: title,
            content: content,
            screenshotUrl: screenshotUrl,
            timestamp: new Date().toISOString()
        };

        if (stepId) {
            // Mise Ã  jour
            const stepIndex = this.exploitationStepsData.findIndex(s => s.id === stepId);
            if (stepIndex > -1) {
                this.exploitationStepsData[stepIndex] = stepData;
            }
        } else {
            // Ajout
            this.exploitationStepsData.push(stepData);
        }

        this.populateExploitationSteps(this.exploitationStepsData);

        // Fermer la modale
        if (typeof $ !== 'undefined' && $.fn.modal) {
            $('#exploitationStepDetailModal').modal('hide');
        }
    }

    deleteExploitationStep(stepId) {
        if (!confirm('ÃŠtes-vous sÃ»r de vouloir supprimer cette Ã©tape d\'exploitation ?')) {
            return;
        }

        this.exploitationStepsData = this.exploitationStepsData.filter(s => s.id !== stepId);
        this.populateExploitationSteps(this.exploitationStepsData);
    }

    moveStep(stepId, direction) {
        const sortedSteps = [...this.exploitationStepsData].sort((a, b) => (a.order || 0) - (b.order || 0));
        const currentIndex = sortedSteps.findIndex(s => s.id === stepId);

        if (currentIndex === -1) return;

        let swapIndex = -1;
        if (direction === 'up' && currentIndex > 0) {
            swapIndex = currentIndex - 1;
        } else if (direction === 'down' && currentIndex < sortedSteps.length - 1) {
            swapIndex = currentIndex + 1;
        }

        if (swapIndex !== -1) {
            const stepToMove = this.exploitationStepsData.find(s => s.id === sortedSteps[currentIndex].id);
            const stepToSwapWith = this.exploitationStepsData.find(s => s.id === sortedSteps[swapIndex].id);

            if (stepToMove && stepToSwapWith) {
                const tempOrder = stepToMove.order;
                stepToMove.order = stepToSwapWith.order;
                stepToSwapWith.order = tempOrder;

                this.populateExploitationSteps(this.exploitationStepsData);
            }
        }
    }

    updateScreenshotPreview(url) {
        const preview = document.getElementById('stepDetailModalScreenshotPreview');
        if (!preview) return;

        preview.innerHTML = '';
        
        if (url && (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/'))) {
            const img = document.createElement('img');
            img.src = url;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '180px';
            img.alt = 'AperÃ§u capture d\'Ã©cran';
            img.onerror = () => {
                preview.innerHTML = '<p class="text-danger small">Impossible de charger l\'aperÃ§u de l\'image.</p>';
            };
            preview.appendChild(img);
        } else if (url) {
            preview.innerHTML = '<p class="text-muted small">AperÃ§u non disponible pour ce chemin.</p>';
        }
    }

    generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    getExploitationStepsData() {
        return this.exploitationStepsData || [];
    }
} 